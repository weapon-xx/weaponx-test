{"dependencies":[{"name":"./util","loc":{"line":71,"column":27}}],"generated":{"js":"\"use strict\";\n\n// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\nrequire = function (modules, cache, entry) {\n  // Save the require from previous bundle to this closure if any\n  var previousRequire = typeof require === \"function\" && require;\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      var localRequire = function localRequire(x) {\n        return newRequire(localRequire.resolve(x));\n      };\n\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire = typeof require === \"function\" && require;\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        var err = new Error('Cannot find module \\'' + name + '\\'');\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = function (x) {\n        return modules[name][1][x] || x;\n      };\n\n      var module = cache[name] = new newRequire.Module();\n      modules[name][0].call(module.exports, localRequire, module, module.exports);\n    }\n\n    return cache[name].exports;\n  }\n\n  function Module() {\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  // Override the current require with this new one\n  return newRequire;\n}({ 2: [function (require, module, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: !0 });var e = exports.say = function () {};\n  }, {}], 1: [function (require, module, exports) {\n    \"use strict\";\n    var r = require(\"./util\");(0, r.say)();\n  }, { \"./util\": 2 }] }, {}, [1]);"},"hash":"d49fbd519f5e3f30f8f69521e5cf7103"}